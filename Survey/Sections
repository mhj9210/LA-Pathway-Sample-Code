import React, { Component } from "react";
import SectionsTitle from "./SectionsTitle";
import SectionCards from "./SectionCards";
import PropTypes from "prop-types";
import Pagination from "rc-pagination";
import "rc-pagination/assets/index.css";
import * as surveySectionsService from "../../services/surveySectionService";
import PageSizeChange from "./PageSizeChange";
import { toast } from "react-toastify";

export default class Sections extends Component {
  constructor(props) {
    super(props);
    this.state = {
      surveyCard: [],
      current: 0,
      totalCount: 0,
      pageSize: 4
    };
  }

  componentDidMount() {
    this.getSurveys(this.state.current, this.state.pageSize);
  }

  getSurveys = (pageIndex, pageSize) => {
    surveySectionsService
      .paginate(pageIndex, pageSize)
      .then(this.selectAllSuccess)
      .catch(this.selectAllError);
  };

  selectAllSuccess = data => {
    const pageItems = data.item.pagedItems;
    this.setState(prevState => {
      return {
        ...prevState,
        surveyCard: pageItems,
        totalCount: data.item.totalCount
      };
    });
  };

  selectAllError = error => {
    toast.error(error.message);
  };

  surveyForm = section => {
    this.props.history.push(`/admin/section/${section.id}/edit`, section);
  };

  viewDetails = detail => {
    this.props.history.push(`/admin/section/${detail.id}/detail`, detail);
  };

  goBack = () => {
    this.props.history.push(`/admin/survey/sections`);
  };

  sectionCardMap = section => (
    <SectionCards
      key={section.id}
      section={section}
      surveyForm={this.surveyForm}
      viewDetails={this.viewDetails}
      goBack={this.goBack}
    />
  );

  onPageChange = page => {
    this.setState(
      prevState => {
        return {
          ...prevState,
          current: page - 1
        };
      },
      () => {
        this.getSurveys(page - 1, this.state.pageSize);
      }
    );
  };

  changePagesize = e => {
    const pageSize = parseInt(e.target.value);
    this.setState(prevState => {
      return {
        ...prevState,
        pageSize
      };
    });
    this.getSurveys(this.state.current, pageSize);
  };

  render() {
    return (
      <>
        <div className="row">
          <SectionsTitle />
        </div>

        <div className="row">
          <div className="m-3">
            <PageSizeChange
              onChange={this.changePagesize}
              value={this.state.pageSize}
            />
          </div>
        </div>

        <div className="row">
          {this.state.surveyCard.length > 0
            ? this.state.surveyCard.map(this.sectionCardMap)
            : "No Sections Found..."}
        </div>

        <div className="row">
          <Pagination
            style={{ margin: "auto" }}
            className="pb-3 ant-pagination"
            onChange={this.onPageChange}
            current={this.state.current + 1}
            total={this.state.totalCount}
            pageSize={this.state.pageSize}
            showTitle={false}
          />
        </div>
      </>
    );
  }
}

Sections.propTypes = {
  history: PropTypes.shape({
    push: PropTypes.func.isRequired
  })
};
